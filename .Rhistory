x <- 1:10
y <- rnorm(20)
plot(x,y)
x <- 1:20
y <- rnorm(20)
plot(x,y)
x <- 1:20
y <- rnorm(20)
plot(x,y)
=
=
x <- 1:20
y <- rnorm(20)
plot(x,y)
x <- 1:20
y <- rnorm(20)
plot(x,y)
echo=TRUE, fig=TRUE
echo=TRUE, fig=TRUE
x <- 1:20
y <- rnorm(20)
plot(x,y)
# Chunk 1
x <- 1:20
y <- rnorm(20)
plot(x,y)
# Chunk 1
x <- 1:20
y <- rnorm(20)
plot(x,y)
\documentclass{article}
\begin{document}
\SweaveOpts{concordance=TRUE}
\emph{Hello, world}
<<echo=TRUE, fig=TRUE>>=
x <- 1:20
y <- rnorm(20)
plot(x,y)
@
\end{document}
Library(ISwR)
install.packages("ISwR")
Library(ISwR)
library(ISwR)
plot(rnorm(1000))
plot(rnorm(1000))
x <- rnorm(1000)
plot(x)
exp(-2)
1+2
exp(-2)
rnorm(15)
x=rnorm(15)
y=5+2*rnorm(15)
plot(x, y)
bmi[3]
t.test(bmi, mu=22.5)
weight=c(60, 72, 57, 90, 95, 72)
weight
height=c(1.75, 1.80, 1.65, 1.90, 1.74, 1.91)
bmi <- weight/height^2
bmi
bmi[3]
@
sum(weight)
sum(weight)/length(weight)
xbar = sum(weight)/length(weight)
weight- xbar
(weight - xbar)^2
sum((weight - xbar)^2)
sqrt(sum((weight - xbar)^2)/(length(weight) - 1))
mean(weight)
sd(weight)
@
t.test(bmi, mu=22.5)
plot(height,weight)
plot(height, weight)
plot(height, weight, pch=2)
plot(height, weight, pch=2)
plot(height, weight)
hh <- c(1.65, 1.70, 1.75, 1.80, 1.85, 1.90)
lines(hh, 22.5* hh^2)
plot(height, weight)
plot(height, weight, pch=2)
weight= 22.5* height^2
hh <- c(1.65, 1.70, 1.75, 1.80, 1.85, 1.90)
lines(hh, 22.5* hh^2)
plot(height, weight, pch=2)
lines(hh, 22.5* hh^2)
plot(height, weight)
lines(hh, 22.5* hh^2)
plot(height, weight, pch=2)
hh<- c(1.65, 1.70, 1.75, 1.80, 1.85, 1.90)
plot(height, weight)
plot(height, weight, pch=2)
lines(hh, 22.5* hh^2)
hh<- c(1.65, 1.70, 1.75, 1.80, 1.85, 1.90)
plot(height, weight)
lines(hh, 22.5* hh^2)
plot(height, weight, pch=2)
lines(hh, 22.5* hh^2)
weight=c(60, 72, 57, 90, 95, 72)
weight
height=c(1.75, 1.80, 1.65, 1.90, 1.74, 1.91)
bmi <- weight/height^2
bmi
bmi[3]
plot(height, weight, pch=2)
plot(height, weight)
weight= 22.5* height^2
hh<- c(1.65, 1.70, 1.75, 1.80, 1.85, 1.90)
plot(height, weight)
plot(height, weight, pch=2)
lines(hh, 22.5* hh^2)
weight= 22.5* height^2
ls()
args(plot.default)
args(plot.default)
args(plot.default)
c("Huey","Dewey","Louie")
c(T,T,F,T)
bmi > 25
cat(c("Huey","Dewey","Louie"))
cat("Huey","Dewey","Louie", "\n")
cat("Huey","Dewey","Louie", "\n", "1")
cat("What is \"R\"?\n")
func <- args(plot.default)
c("Huey","Dewey","Louie")
Sys.which('pdflatex')
args(plot.default)
cat(args(plot.default))
func <- args(plot.default)
cat(func())
cat(func
cat(func)
func
cat("func")
cat(as.character(func))
as.character(func)
utils::str(ls)
func <- utils::str(ls)
func <- as.character(utils::str(ls))
cat(as.character(utils::str(ls))
cat(as.character(utils::str(ls))
)
cat(as.character(utils::str(ls)))
args(graphics::plot.default)
utils::str(plot.default)
cat(as.character(utils::str(plot.default)))
utils::str(plot.default)
Sys.which('pdflatex')
c(42,57,12,39,1,3,4)
x=c(red="Huey", blue="Dewey", green="Louie")
names(x)
c(FALSE, 3)
c(pi, "abc")
c(FALSE, "abc")
x
names(x)
4:9
seq(4, 9)
seq(4, 10, 2)
oops= c(7,9,13)
rep(oops,3)
rep(oops,1:3)
rep(1:2,c(10,15))
dim(rep(1:2,c(10,15)))
length(rep(1:2,c(10,15)))
rep(1:2,each=10)
length(rep(1:2,3:5)
rep(1:2,3:5)
x =1:12
dim(x) = c(3,4)
View(x)
x=matrix(1:12,nrow=3,byrow=T)
View(x)
rownames(x) <- LETTERS[1:3]
t(x)
pain=c(0,3,2,2,1)
fpain=factor(pain,levels=0:3)
levels(fpain)=c("none","mild","medium","severe")
fpain
as.numeric(fpain)
levels(fpain)
fpain
levels(fpain)
fpain=factor(pain,levels=0:3)
fpain
pain=c(0,3,2,2,1)
fpain=factor(pain,levels=0:3)
fpain
levels(fpain)
levels(fpain)=c("none","mild","medium","severe")
levels(fpain)
intake.pre=c(5260,5470,5640,6180,6390,6515,6805,7515,7515,8230,8770)
intake.post=c(3910,4220,3885,5160,5645,4680,5265,5975,6790,6900,7335)
mylist=list(before=intake.pre,after=intake.post)
mylist
mylist$before
\mathrm{E}
library(dat)
install.packages("dat")
library(dat)
mode(gamma)
gamma <- rgamma(100, 2, 2)
mean(gamma)
median(gamma)
mode(gamma)
curve(dgamma(x, 2,2), 0, 10)
abline(v=mean(gamma), lty=2, lwd=2, col="red")
abline(v=median(gamma), lty=2, lwd=2, col="red")
abline(v=mean(gamma), lty=2, lwd=2, col="blue")
abline(v=median(gamma), lty=2, lwd=2, col="red")
which.max(gamma)
gamma <- rgamma(100, 2, 2)
gamma
which.max(gamma)
names(which.max(gamma))
max(gamma)
max(dgamma(x, 2,2))
install.packages("modeest")
library(modeest)
library(modeest)
install.packages("modeest")
library(modeest)
library(modeest)
gamma <- rgamma(100, 2, 2)
mean(gamma)
median(gamma)
mfv(gamma)
curve(dgamma(x, 2,2), 0, 10)
gamma
which.max(gamma)
names(which.max(gamma))
gamma[which.max(gamma)]
summary(ganna)
summary(gamma)
abline(v=gamma[which.max(gamma)], lty=2, lwd=2, col="red")
curve(dgamma(x, 2,2), 0, 10)
abline(v=mean(gamma), lty=2, lwd=2, col="bule")
abline(v=mean(gamma), lty=2, lwd=2, col="blue")
abline(v=median(gamma), lty=2, lwd=2, col="red")
mean(gamma)
binom <- rbinom(100, 100, 2/3)
mean(binom)
median(binom)
curve(dbinom(x, 100, 2/3), 0, 10)
curve(dbinom(x, 100, 2/3))
hist(binom, nclas=max(binom)-min(binom)+1)
mean(binom)
median(binom)
mfv(curve(dgamma(x, 2,2), 0, 10))
abline(v=mean(gamma), lty=2, lwd=2, col="blue")
abline(v=median(gamma), lty=2, lwd=2, col="red")
dgamma(x, 2,2)
dgamma(10, 2,2)
binom <- rbinom(100, 100, 2/3)
mean(binom)
median(binom)
hist(binom, nclas=max(binom)-min(binom)+1)
curve(dbinom(x, 100, 2/3))
n=100; p=0.3; k=seq(0,n)
plot(k, dbinom(k,n,p), type='h', main='dbinom(n=100, p=0.3)', xlab='k')
curve(dnorm(x,n*p,sqrt(n*p*(1-p))), add=T, col='blue')
n=100; p=2/3; k=seq(0,n)
plot(k, dbinom(k,n,p), type='h', main='dbinom(n=100, p=0.3)', xlab='k')
curve(dnorm(x,n*p,sqrt(n*p*(1-p))), add=T, col='blue')
plot(k, dbinom(k,n,p), type='h')
plot(k, dbinom(k,n,p))
, type='h'
plot(k, dbinom(k,n,p), type='h')
curve(dnorm(x,n*p,sqrt(n*p*(1-p))), add=T, col='blue')
curve(dnorm(x,n*p,sqrt(n*p*(1-p))), add=T, col='green3')
hist(binom, nclas=max(binom)-min(binom)+1)
n=100; p=2/3; k=seq(0,n)
plot(k, dbinom(k,n,p), type='h')
curve(dnorm(x,n*p,sqrt(n*p*(1-p))), add=T, col='green3')
abline(v=mean(binom), lty=2, lwd=2, col="blue")
abline(v=median(binom), lty=2, lwd=2, col="red")
n=100; p=2/3; k=seq(40,n)
plot(k, dbinom(k,n,p), type='h')
curve(dnorm(x,n*p,sqrt(n*p*(1-p))), add=T, col='green3')
abline(v=mean(binom), lty=2, lwd=2, col="blue")
abline(v=median(binom), lty=2, lwd=2, col="red")
n=100; p=2/3; k=seq(40,90)
plot(k, dbinom(k,n,p), type='h')
curve(dnorm(x,n*p,sqrt(n*p*(1-p))), add=T, col='green3')
abline(v=mean(binom), lty=2, lwd=2, col="blue")
abline(v=median(binom), lty=2, lwd=2, col="red")
mean(binom)
median(binom)
binom <- rbinom(100, 100, 2/3)
mean(binom)
median(binom)
n=100; p=2/3; k=seq(40,90)
plot(k, dbinom(k,n,p), type='h')
curve(dnorm(x,n*p,sqrt(n*p*(1-p))), add=T, col='green3')
library(modeest)
gamma <- rgamma(100, 2, 2)
mean(gamma)
median(gamma)
# mfv(gamma)
gamma[which.max(gamma)]
curve(dgamma(x, 2,2), 0, 10)
abline(v=mean(gamma), lty=2, lwd=2, col="blue")
abline(v=median(gamma), lty=2, lwd=2, col="red")
curve(dgamma(x, 2,2), 0, 10)
dgamma(x, 2,2)
dgamma(10, 2,2)
1/(s^a Gamma(a)) x^(a-1) e^-(x/s)
f(x)= 1/(s^a Gamma(a)) x^(a-1) e^-(x/s)
f(x)= 1/(s^a* Gamma(a))* x^(a-1) *e^-(x/s)
optimize(dgamma(x, 2,2), maximum = T)
optimize(dgamma(x, 2,2), c(0,2), maximum = T)
gamma
Gamma()
Gamma(2,2)
dgamma()
dgamma(2,2)
binom <- rbinom(100, 100, 2/3)
mean(binom)
median(binom)
n=100; p=2/3; k=seq(40,90)
plot(k, dbinom(k,n,p), type='h')
curve(dnorm(x,n*p,sqrt(n*p*(1-p))), add=T, col='green3')
abline(v=mean(binom), lty=2, lwd=2, col="blue")
abline(v=median(binom), lty=2, lwd=2, col="red")
dnorm(x,n*p,sqrt(n*p*(1-p)))
x <- factor(c("Huey", "Dewey", "Louie", "Huey"))
y <- c("bule", "red", "green")
x
y[x]
x <- factor(c("Huey", "Dewey", "Louie", "Huey"), levels = y)
x
x <- c(I, you, he, she)
x <- c("I", "you", "he", "she")
factor(x)
levels(x)
factor(x, levels = c("Huey", "Dewey", "Louie", "Huey"))
x <- factor(x, levels = c("Huey", "Dewey", "Louie", "Huey"))
x <- factor(x, levels = c("Huey", "Dewey", "Louie", "Sherry"))
x
x <- c("I", "you", "he", "she")
a <- factor(x, levels = c("Huey", "Dewey", "Louie", "Sherry"))
f <- factor(x, levels = c("Huey", "Dewey", "Louie", "Sherry"))
f <- factor(x, labels =  = c("Huey", "Dewey", "Louie", "Sherry"))
f <- factor(x, labels = c("Huey", "Dewey", "Louie", "Sherry"))
f
f <- factor(x, levels = c("I", "you", "he", "she"), labels = c("Huey", "Dewey", "Louie", "Sherry"))
f
random <- sample(x, 10, replace = T)
factor(random)
factor(random, levels = f)
factor(random, levels = x)
x <- y <- c("A", "b", "c", NA)
is.na(x)
is.na(x) == is.na(y)
all(is.na(x) == is.na(y))
all(c(T, F, T)
all(c(T, F, T)
)
all(c(T, F, T))
x <- factor(c("Huey", "Dewey", "Louie", "Huey"))
y <- c("bule", "red", "green")
x
y[x]
y[1]
x
x[1]
x<-matrix(1:12,ncol=3)
x
apply(x,1,sum)
apply(x,2,sum)
apply(x,3,sum)
x <- list(a = 1:10, b = rnorm(6,10,5), c = c(TRUE,FALSE,FALSE,TRUE));x
# 分别计算每个KEY对应该的数据的分位数。
lapply(x,fivenum)
fivenum(x)
fivenum(1:10)
x <- cbind(x1=3, x2=c(2:1,4:5))
x
rexp(20)
sapply(1:10, function(i) mean(rexp(20)))
dim(sapply(1:10, function(i) mean(rexp(20))))
rexp(20)
mean(rexp(20))
dbinom(10, size = 10, prob = 0.8)
plot(dbinom(10, size = 10, prob = 0.8))
plot(pbinom(10, size = 10, prob = 0.8))
pbinom(10, size = 10, prob = 0.8)
curve(plot(pbinom(10, size = 10, prob = 0.8)))
curve(pbinom(10, size = 10, prob = 0.8))
curve(dbinom(10, size = 10, prob = 0.8))
dbinom(10, size = 10, prob = 0.8)
n=10; p=0.3; k=seq(0,n)
plot(k, dbinom(k,n,p), type='h', main='dbinom(0:20, n=10, p=0.3)', xlab='k')
plot(dbinom(10, size = 10, prob = 0.8))
plot(k, dbinom(10, size = 10, prob = 0.8))
plot(dbinom(1:10, size = 10, prob = 0.8))
plot(dbinom(1:10, size = 20, prob = 0.8))
plot(dbinom(1:100, size = 20, prob = 0.8))
plot(dbinom(1:100, size = 20, prob = 0.8), xlab='k')
plot(dbinom(1:100, size = 20, prob = 0.8), type='h',xlab='k')
plot(1:100, dbinom(1:100, size = 20, prob = 0.8), type='h',xlab='k')
plot(dbinom(1:100, size = 20, prob = 0.8), type='h',xlab='k')
qnorm(0.01/2)
qnorm(0.01)
qnorm(0.01, lower.tail = F)
dbinom(0, size = 10, prob = 2)
dbinom(0, size = 10, prob = .2)
rbinom(10, 1, .5)
c("H", "T")[1 + rbinom(10, 1, .5)]
plot(k, dbinom(k,n,p), type=1, main='dbinom(0:20, n=10, p=0.3)', xlab='k')
plot(rno,rnorm(10), type = "o")
plot(rnorm(10), type = "o")
plot(rnorm(10), type = "o", bg="white")
plot(rnorm(10), type = "o", pch= 21, bg="white")
plot(rnorm(10), type = "o", pch= 20)
x1 <- rnorm(20)
x2 <- rnorm(10)+1
q1 <- qqnorm(x1, plot.it = F)
View(q1)
q1
qqnorm(x1, plot.it = F)
qqnorm(x1, plot.it = F)
qqnorm(x1, plot.it = T)
x1 <- rnorm(20)
x2 <- rnorm(10)+1
q1 <- qqnorm(x1, plot.it = F)
q2 <- qqnorm(x2, plot.it = F)
xr <- range(q1$x, q2$x)
yr <- range(q1$y, q2$y)
qqnorm(x1, xlim = xr, ylim = yr)
points(q2, col= "2")
hist(react)
z <- runif(5)
curve(quantile(z, x), from = 0, to = 1)
x
x <- 1
z <- runif(5)
curve(quantile(z, x), from = 0, to = 1)
quantile(z, x)
x <- .5
quantile(z, x)
curve(quantile(z, 1), from = 0, to = 1)
library(rmr)
install.packages("rMR")
library("rMR", lib.loc="~/R/win-library/3.5")
rmr
rMR::
fit <-  lm(metabolic.rate ~ body.weight, data = rmr)
head(iris,5)
detach("package:rMR", unload=TRUE)
library("rMR", lib.loc="~/R/win-library/3.5")
fit <-  lm(metabolic.rate ~ body.weight, data = rMR)
fit <-  lm(metabolic.rate ~ body.weight, data = "rMR")
fit <-  lm(metabolic.rate ~ body.weight, data = iris)
data <- data.frame(predictor = c(1,2,3,4,5,6),
model <- lm(dv ~ predictor, subset = id, data = data)
summary(model)
data <- data.frame(predictor = c(1,2,3,4,5,6),
dv = c(5,3,5,6,6,1),
id = c(1,2,3,1,2,3))
data <- data.frame(predictor = c(1,2,3,4,5,6),
dv = c(5,3,5,6,6,1),
id = c(1,2,3,1,2,3))
model <- lm(dv ~ predictor, subset = id, data = data)
summary(model)
model <- lm(dv ~ predictor, subset = id, data = data)
lm(dv ~ predictor, subset = id, data = data)
lm(dv ~ predictor, subset = id, data = data)$model
lm(dv ~ predictor, subset = id == 1, data = data)$model
x =cbind(x1=3, x2=c(2:1,4:5))
sapply(x, sum)
sapply(data.frame(x), sum)
x
sapply(x, sum, 1)
sapply(data.frame(x), sum)
sapply(data.frame(x), sum, 1)
class(lapply(x, sum))
class(sapply(x, sum))
library(gplots)attach(mtcars)cyl <- factor(cyl)plotmeans(mpg~cyl,xlab="Number of Cylinders",  ylab="Miles Per Gallon", main="Mean Plot\nwith 95% CI")
set.seed(2)
set.seed(1)
setwd("~/Regression_summar/")
setwd("~/Regression_summar")
library(data.table)
library(dplyr)
USA <- fread("USAlumniDonation.csv")
USA <- fread("USAlumniDonation.csv")
###################
####描述性統計#####
###################
library(RcmdrMisc)
summary(USA)
numSummary(USA, statistics = c("mean", "sd", "se(mean)", "IQR", "quantiles", "cv"), quantiles=c(0,.25,.5,.75,1))
USA0 <- fread("USAlumniDonation.csv")
USA <- USA0 %>% select(AGR, grad, under, SFR)
################
###複回歸模型###
################
MA <- lm(AGR ~ grad + under + under + SFR, data = USA)
summary(MA)
MA$fitted.values
M0 <- lm(AGR ~ 1, data = USA)
anova(MA, M0, test = "F")
summary(MA)
# Type III test
Anova(MA, type = "III")
# Nested model comparison MB
MB <- lm(AGR ~ grad, data = USA)
anova(MA, MB, test = "F")
